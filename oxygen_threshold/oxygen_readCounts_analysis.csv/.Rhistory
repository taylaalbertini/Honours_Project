mean_male_cpms_DESq <- read_delim(file = import_mean_male_cpms_DESq,
col_names = TRUE,
delim = ",")
# remove the first column - "...1"
mean_male_cpms_DESq <- mean_male_cpms_DESq[,-1]
# copy mean_cpms for subsequent analysis
mean_male_cpms_DESq_cp <- as.data.frame(mean_male_cpms_DESq)
# make calc_rank a function
calculate_rank <- function(x) {
return(rank(-x))
}
# rank normalised cpms by female_tissue
mean_male_cpms_DESq[, paste0(names(mean_male_cpms_DESq)[-1], "_Rank")] <- apply(mean_male_cpms_DESq [, -1, drop = FALSE], 2, calculate_rank)
## convert sex_tissue into row names
mean_male_cpms_DESq <- tibble::column_to_rownames(mean_male_cpms_DESq, var = "sex_tissue")
# create a df selecting just for _Rank
ranked_male_cpms_DESq <- data.frame(mean_male_cpms_DESq) %>%
dplyr::select(matches("_Rank"))
# creating the rank table
## create a dataframe with geneid in rows and samples in columns
ranked_male_DESq <- t(ranked_male_cpms_DESq) %>%
data.frame() %>%
## change gene ensembls from being row names to its own column, matching the format of rankComparison_female_TMM
tibble::rownames_to_column("geneid")
### remove "_Rank" from the end of the geneids
ranked_male_DESq <- tidyr::separate(
ranked_male_DESq,
col = geneid,
into = c("geneid", "right"),
sep = "_Rank") %>%
mutate(geneid = str_remove(geneid, "_Rank")) %>%
dplyr::select(-right)
# rename to sex_tissue_rank
colnames(ranked_male_DESq) <- gsub("male_placenta_early", "male_placenta_early_rank", colnames(ranked_male_DESq))
colnames(ranked_male_DESq) <- gsub("male_placenta_mid", "male_placenta_mid_rank", colnames(ranked_male_DESq))
# create the nCPMs table in the same format as rank table so they can be joined
## transpose the data frame, flips rows and columns (rows become columns and columns become rows)
nCPMs_male_DESq <- data.frame(mean_male_cpms_DESq_cp) %>%
tibble::column_to_rownames(., var = "sex_tissue") %>%
t() %>%
data.frame() %>%
## change gene ensembls from being row names to its own column, matching the format of rankComparison_female_TMM
tibble::rownames_to_column("geneid")
# rename to sex_tissue_cpm
colnames(nCPMs_male_DESq) <- gsub("male_placenta_early", "male_placenta_early_cpm", colnames(nCPMs_male_DESq))
colnames(nCPMs_male_DESq) <- gsub("male_placenta_mid", "male_placenta_mid_cpm", colnames(nCPMs_male_DESq))
# combine via left_join nCPMs_female_DESq and ranked_female_TMM
nCPMs_rank_male <- dplyr::left_join(ranked_male_DESq, nCPMs_male_DESq, copy = TRUE, by = join_by(geneid))
# select for when placenta_rank = 2
placenta_male_2_DESq <- subset(nCPMs_rank_male, male_placenta_mid_rank == "2")
# filter for where rank = 1 and cpm > 1
nCPM_rank_1_DESq <- dplyr::filter(placenta_male_2_DESq, male_placenta_early_rank == "1" & male_placenta_early_cpm > 1)
# separate _cpm  and _rank into its own table again
## separate cpm into its own table
nCPM_1_DESq <- tibble::column_to_rownames(nCPM_rank_1_DESq, var = "geneid") %>%
data.frame() %>%
dplyr::select(matches("_cpm"))
## separate rank into its own table
rank_1_DESq <- tibble::column_to_rownames(nCPM_rank_1_DESq, var = "geneid") %>%
data.frame() %>%
dplyr::select(matches("_rank"))
# convert cpm_1_TMM into long form
## convert rows into a column
nCPM_1_DESq_long <- tibble::rownames_to_column(nCPM_1_DESq, var = "geneid")
## rename, remove "_cpm"
names(nCPM_1_DESq_long) <- gsub("_cpm", "", names(nCPM_1_DESq_long))
#convert into long form
nCPM_1_DESq_long <- tidyr::gather(nCPM_1_DESq_long, tissue, cpm, male_placenta_early, male_placenta_mid)
# convert rank_1_TMM into long form
## convert rows into a column
rank_1_DESq_long <- tibble::rownames_to_column(rank_1_DESq, var = "geneid")
## rename, remove "_cpm"
names(rank_1_DESq_long) <- gsub("_rank", "", names(rank_1_DESq_long))
#convert into long form
rank_1_DESq_long <- tidyr::gather(rank_1_DESq_long, tissue, rank, male_placenta_early, male_placenta_mid)
rank_1_DESq_long_2 <- dplyr::filter(rank_1_DESq_long, rank == "1")
# join the long form tables - nCPM_1_TMM_long and rank_5_TMM
nCPM_rank_1_DESq_long <- dplyr::left_join(rank_1_DESq_long_2, nCPM_1_DESq_long, by = c("geneid", "tissue"))
## rename cpm to nCPM_5
colnames(nCPM_rank_1_DESq_long) <- gsub("cpm", "nCPM_1", colnames(nCPM_rank_1_DESq_long))
# create a long df of just placenta_rank == 6  with ensembl IDs and cpms
## create a long df with just the instances where placenta = 6
rank_placenta_long <- dplyr::filter(rank_1_DESq_long, rank == "2")
## join nCPM_5_TMM_long to rank_placenta_long to create placenta rank 6 cpms table
placenta_2_nCPM <- dplyr::left_join(rank_placenta_long, nCPM_1_DESq_long, by = c("geneid", "tissue"))
### rename so they are unique
colnames(placenta_2_nCPM) <- gsub("cpm", "nCPM_2", colnames(placenta_2_nCPM))
### remove rank and tissue columns
placenta_2_nCPM <- dplyr::select(placenta_2_nCPM, -tissue, -rank)
# join placenta_2_nCPM and nCPM_rank_5_TMM_long creating a df with both the nCPMs of rank 5 and 6
nCPM1_nCPM2_DESq_male <- dplyr::left_join(nCPM_rank_1_DESq_long, placenta_2_nCPM, by = "geneid")
# create a new column nCPM5/nCPM6
nCPM1_nCPM2_DESq_male$nCPM_ratio <- nCPM1_nCPM2_DESq_male$nCPM_1 / nCPM1_nCPM2_DESq_male$nCPM_2
# select for nCPM_ratio > 3
placenta_m_depleted_DESq <- nCPM1_nCPM2_DESq_male[nCPM1_nCPM2_DESq_male$nCPM_ratio >3,]
# replace gneeid with ensembl
colnames(placenta_m_depleted_DESq) <- gsub("geneid", "ensembl", colnames(placenta_m_depleted_DESq))
View(placenta_m_depleted_DESq)
write.csv(placenta_m_depleted_DESq, file = file.path(projectDir, "DESq_placentaM_mid_depleted.csv"))
# DESq_depletedM
DESq_depletedM <- read_delim(file = import_DESq_depletedM,
col_names = TRUE,
delim = ",") %>%
as.data.frame()
## tidy df - remove the "..1" column
DESq_depletedM <- DESq_depletedM[,-1]
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData"
import_TMM_depletedM <- file.path(projectDir, "TMM_placentaM_mid_depleted.csv")
import_DESq_depletedM <- file.path(projectDir, "DESq_placentaM_mid_depleted.csv")
input_genome_gff3_file <- file.path(projectDir, "gencode.v29.chr_patch_hapl_scaff.annotation.gff3")
# TMM_depletedM
TMM_depletedM <- read_delim(file = import_TMM_depletedM,
col_names = TRUE,
delim = ",") %>%
as.data.frame()
## tidy df - remove the "..1" column
TMM_depletedM <- TMM_depletedM[,-1]
# DESq_depletedM
DESq_depletedM <- read_delim(file = import_DESq_depletedM,
col_names = TRUE,
delim = ",") %>%
as.data.frame()
## tidy df - remove the "..1" column
DESq_depletedM <- DESq_depletedM[,-1]
# import the gencodev32_gff_inFile file
all_gencode_v29 <- rtracklayer::import(input_genome_gff3_file)
# this file contains more information than we need here
# subset out only the columns we need
gene_data <- data.frame(ensembl = all_gencode_v29@elementMetadata$gene_id,
hgnc_symbol = all_gencode_v29@elementMetadata$gene_name,
seqnames = all_gencode_v29@seqnames,
gene_type = all_gencode_v29@elementMetadata$gene_type)
# we're left with multiple identical rows, keep one each
gencode_v29_gene_id_symbol_chr_biotype <- gene_data %>%
dplyr::distinct(., .keep_all = TRUE)
# which leaves us with the following dimensions where there is a unique combination of ensembl ID, hgnc symbol and chromosome
dim(gencode_v29_gene_id_symbol_chr_biotype) # 64837 3
# this does however, leave us with duplicate ensembl IDs
dim(gencode_v29_gene_id_symbol_chr_biotype[!duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl), ]) # 64792 3
# after generating a table to see the duplicates I can see that this is an X/Y chromosome issue. All genes are assigned to both chromosomes
duplicate_rows <- gencode_v29_gene_id_symbol_chr_biotype[duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl) | duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl, fromLast = TRUE),]
# remove duplicates (we don't use the chromosome information for anything)
gencode <- gencode_v29_gene_id_symbol_chr_biotype[!duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl), ]
# tidy the TMM and DESq2 normalised dfs
## filter the df to only including the relevant pieces of information and make specific to normalisation technique
# TMM
## remove rank column
TMM_depletedM <- TMM_depletedM[,-3]
## rename columns to be specific to TMM normalisation
colnames(TMM_depletedM) <- gsub("tissue", "tissue_TMM", colnames(TMM_depletedM))
colnames(TMM_depletedM) <- gsub("nCPM_1", "nCPM_1_TMM", colnames(TMM_depletedM))
colnames(TMM_depletedM) <- gsub("nCPM_2", "nCPM_mid_placenta_TMM", colnames(TMM_depletedM))
colnames(TMM_depletedM) <- gsub("nCPM_ratio", "nCPM_ratio_TMM", colnames(TMM_depletedM))
# DESq
## remove rank column
DESq_depletedM <- DESq_depletedM[,-3]
## rename columns to be specific to TMM normalisation
colnames(DESq_depletedM) <- gsub("tissue", "tissue_DESq", colnames(DESq_depletedM))
colnames(DESq_depletedM) <- gsub("nCPM_1", "nCPM_1_DESq", colnames(DESq_depletedM))
colnames(DESq_depletedM) <- gsub("nCPM_2", "nCPM_mid_placenta_DESq", colnames(DESq_depletedM))
colnames(DESq_depletedM) <- gsub("nCPM_ratio", "nCPM_ratio_DESq", colnames(DESq_depletedM))
## test to ensure there are no duplicated ensembl names
sum(duplicated(TMM_depletedM$ensembl))
sum(duplicated(DESq_depletedM$ensembl))
# left join TMM_depletedM to DESq_depletedM
placentaM_depleted <- dplyr::inner_join(TMM_depletedM, DESq_depletedM, by = join_by(ensembl))
# left join gene signature with depleted ensembl id
# left join genecode and placentaM_depleted
placentaM_depleted_annotated <- dplyr::left_join(placentaM_depleted, gencode, by = join_by(ensembl))
# tidy placentaM_depleted_annotated
## remove seqnames and genetype columns
placentaM_depleted_annotated <- dplyr::select(placentaM_depleted_annotated, -seqnames, -gene_type)
## remove the period and numbers thereafter
placentaM_depleted_annotated_2 <- tidyr::separate(placentaM_depleted_annotated, col = ensembl, into = c("ensembl", "right")) %>%
dplyr::select(., -right)
View(placentaM_depleted_annotated_2)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
deps <- c("ensembldb", "AnnotationHub")
sapply(deps, function(x){
if (!require(x, quietly = TRUE, character.only = TRUE))
BiocManager::install(x)
})
library(ensembldb)
library(AnnotationHub)
# lets take a snapshot of the AnnotationHub data base
ah <- AnnotationHub(ask = FALSE)
# take a look at the information inside
mcols(ah)
# use the `query()` function to extract the information for humans
ensdb_homo <- query(ah, c("EnsDb", "Homo sapiens"))
# keep only the information for AH95744 (which is the same as your gencode V29)
ensdb_104 <- ensdb_homo[["AH95744"]]
# Extract gene-level information and take a look
genes(ensdb_104, return.type = "data.frame") %>% View()
# now put that gene-level information into a data frame
genes_info <- genes(ensdb_104, return.type = "data.frame")
# left join genes_info with placentaM_depleted_annotated_2
## change geneid column name to ensembl
colnames(genes_info) <- gsub("gene_id", "ensembl", colnames(genes_info))
## left join the dfs
placentaM_depleted_annotated_2 <- dplyr::left_join(placentaM_depleted_annotated_2, genes_info, by = join_by(ensembl))
## tidy the df
placentaM_depleted_annotated_2 <- dplyr::select(placentaM_depleted_annotated_2, -11:-17)
placentaM_depleted_annotated_2 <- dplyr::select(placentaM_depleted_annotated_2, -12:-15)
View(placentaM_depleted_annotated_2)
write.csv(placentaM_depleted_annotated_2, file = file.path(projectDir, "mid_placentaM_depleted_annotated.csv"))
# Chunk 1
# load relevant libraries
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData"
# set path for data tables
import_earlyF_depleted <- file.path(projectDir, "earlyF_depleted.csv")
import_meanF_ncpms <- file.path(projectDir, "mean_female_cpms_oxy_TMM.csv")
# Chunk 2
# import female placenta depleted transcript table
placentaF_depleted <- read_delim(file = import_earlyF_depleted,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## remove the first column "...1" that;s input when the file is imported
dplyr::select(., -...1)
# import ncpms of all female tissues
ncpms_female <- read_delim(file = import_meanF_ncpms,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## remove the first column "...1" that;s input when the file is imported
dplyr::select(., -...1)
# transform ncpm table so that 'ensembl' are rownames and sex_tissue are columns with ncpms
ncpms_female_2 <- t(ncpms_female) %>%
data.frame() %>%
tibble::rownames_to_column("ensembl")
# tidy table
## remove placenta counts
ncpms_female_2 <- ncpms_female_2[,-2]
## rename column names
colnames(ncpms_female_2) <- gsub("X2", "Female Placenta (mid-gestation)", colnames(ncpms_female_2))
## remove sex_tissue row
ncpms_female_2 <- ncpms_female_2[-1,]
# subset placentaF_depleted to only include ncpms_TMM for placenta and corresponding ensembl IDs
depleted_placentaF <- dplyr::select(placentaF_depleted, ensembl, nCPM_early_placenta_TMM)
# left join ncpms_female_2 to depleted_placentaF
heat_plot <- dplyr::left_join(depleted_placentaF, ncpms_female_2, by = join_by(ensembl))
# tidy
## replace placenta colname
colnames(heat_plot) <- gsub("nCPM_early_placenta_TMM", "Female Placenta (early-gestation)", colnames(heat_plot))
## put ncpms in descending order
heat_plot_ordered <- heat_plot[order(heat_plot$`Female Placenta (early-gestation)`, decreasing = TRUE),]
## make heat_plot_ordered numeric
heat_plot_ordered$`Female Placenta (mid-gestation)` <- as.numeric(heat_plot_ordered$`Female Placenta (mid-gestation)`)
## change order so that placenta is last
heat_plot_ordered <- dplyr::relocate(heat_plot_ordered, `Female Placenta (early-gestation)`, .after = `Female Placenta (mid-gestation)`)
rownames(heat_plot_ordered) <- NULL
pheat_plot <- tibble::column_to_rownames(heat_plot_ordered, var = "ensembl")
# complex heatmap
library(ComplexHeatmap)
# Heatmap function to visualise the matrix as a heatmap with default settings
## make my df a matrix
class(pheat_plot)
mat <- as.matrix(pheat_plot)
## column splot
column_split_vector <- c(rep("Group 1", 1), "Group 2")
## craete box plot annotation
column_ha <- HeatmapAnnotation(`log10 (nCPMs)` = anno_boxplot(log10(mat), which = c("column"), height = unit(4, "cm")))
## print heatmap with annotation
heatmapF <- Heatmap(log10(mat),
column_split = column_split_vector,
column_title = "Tissues",
column_title_gp = gpar(fontsize = 12),
column_title_side = c("bottom"),
row_title = "Genes",
row_title_gp = gpar(fontsize = 12),
show_row_names = FALSE,
column_names_rot = 45,
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = FALSE,
width = unit(2, "cm"),
name = "log10 (nCPM)",
border = "black",
scale_size_continuous(range = -4:4),
bottom_annotation = column_ha)
## print heatmap with annotation
heatmapF <- Heatmap(log10(mat),
column_split = column_split_vector,
column_title = "Tissues",
column_title_gp = gpar(fontsize = 12),
column_title_side = c("bottom"),
row_title = "Genes",
row_title_gp = gpar(fontsize = 12),
show_row_names = FALSE,
column_names_rot = 45,
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = FALSE,
width = unit(2, "cm"),
name = "log10 (nCPM)",
border = "black",
#scale_size_continuous(range = -4:4),
bottom_annotation = column_ha)
heatmapF
## set the colour for the range -4 to 4
color_mapping <- colorRamp2(c(-4, 0, 4), c("blue", "white", "red"))
library(circlize)
## set the colour for the range -4 to 4
color_mapping <- colorRamp2(c(-4, 0, 4), c("blue", "white", "red"))
## print heatmap with annotation
heatmapF <- Heatmap(log10(mat),
column_split = column_split_vector,
column_title = "Tissues",
column_title_gp = gpar(fontsize = 12),
column_title_side = c("bottom"),
row_title = "Genes",
row_title_gp = gpar(fontsize = 12),
show_row_names = FALSE,
column_names_rot = 45,
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = FALSE,
width = unit(2, "cm"),
name = "log10 (nCPM)",
border = "black",
bottom_annotation = column_ha,
col = color_mapping)
library(grid)
## print heatmap with annotation
heatmapF <- Heatmap(log10(mat),
column_split = column_split_vector,
column_title = "Tissues",
column_title_gp = gpar(fontsize = 12),
column_title_side = c("bottom"),
row_title = "Genes",
row_title_gp = gpar(fontsize = 12),
show_row_names = FALSE,
column_names_rot = 45,
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = FALSE,
width = unit(2, "cm"),
name = "log10 (nCPM)",
border = "black",
bottom_annotation = column_ha,
col = color_mapping)
heatmapF
## set colour mapping for range -4 to 4
color_mapping <- colorRamp2(c(-4, 0, 4), c("blue", "white", "red"))
# Chunk 1
# load relevant libraries
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData"
# set path for data tables
import_placentaM_depleted <- file.path(projectDir, "earlyM_depleted.csv")
import_meanM_ncpms <- file.path(projectDir, "mean_male_cpms_oxy_TMM.csv")
# import male placenta depleted transcript table
placentaM_depleted <- read_delim(file = import_placentaM_depleted,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## remove the first column "...1" that;s input when the file is imported
dplyr::select(., -...1)
# import ncpms of all male tissues
ncpms_male <- read_delim(file = import_meanM_ncpms,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## remove the first column "...1" that;s input when the file is imported
dplyr::select(., -...1)
ncpms_male_2 <- t(ncpms_male) %>%
data.frame() %>%
tibble::rownames_to_column("ensembl")
# tidy table
## remove placenta counts
ncpms_male_2 <- ncpms_male_2[,-2]
## rename column names
colnames(ncpms_male_2) <- gsub("X2", "Male Placenta (mid-gestation)", colnames(ncpms_male_2))
## remove sex_tissue row
ncpms_male_2 <- ncpms_male_2[-1,]
# subset placentaF_depleted to only include ncpms_TMM for placenta and corresponding ensembl IDs
depleted_placentaM <- dplyr::select(placentaM_depleted, ensembl, nCPM_early_placenta_TMM)
# left join ncpms_male_2 to depleted_placentaM
heat_plot <- dplyr::left_join(depleted_placentaM, ncpms_male_2, by = join_by(ensembl))
# tidy
## replace placenta colname
colnames(heat_plot) <- gsub("nCPM_early_placenta_TMM", "Male Placenta (early-gestation)", colnames(heat_plot))
## put ncpms in descending order
heat_plot_ordered <- heat_plot[order(heat_plot$`Male Placenta (early-gestation)`, decreasing = TRUE),]
## make heat_plot_ordered numeric
heat_plot_ordered$`Male Placenta (mid-gestation)` <- as.numeric(heat_plot_ordered$`Male Placenta (mid-gestation)`)
## change order so that placenta is last
heat_plot_ordered <- dplyr::relocate(heat_plot_ordered, `Male Placenta (early-gestation)`, .after = `Male Placenta (mid-gestation)`)
rownames(heat_plot_ordered) <- NULL
pheat_plot <- tibble::column_to_rownames(heat_plot_ordered, var = "ensembl")
# complex heatmap
library(ComplexHeatmap)
# Heatmap function to visualise the matrix as a heatmap with default settings
## make my df a matrix
class(pheat_plot)
mat <- as.matrix(pheat_plot)
class(mat)
## column splot
column_split_vector <- c(rep("Group 1", 1), "Group 2")
## craete box plot annotation
column_ha <- HeatmapAnnotation(`log10 (nCPMs)` = anno_boxplot(log10(mat), which = c("column"), height = unit(4, "cm")))
## set colour mapping for range -4 to 4
color_mapping <- colorRamp2(c(-4, 0, 4), c("blue", "white", "red"))
## print heatmap with annotation
heatmapM = Heatmap(log10(mat),
column_split = column_split_vector,
column_title = "Tissues",
column_title_gp = gpar(fontsize = 12),
column_title_side = c("bottom"),
row_title = "Genes",
row_title_gp = gpar(fontsize = 12),
show_row_names = FALSE,
column_names_rot = 45,
column_names_gp = gpar(fontsize = 10),
cluster_rows = FALSE,
cluster_columns = FALSE,
width = unit(2, "cm"),
name = "log10 (nCPM)",
border = "black",
bottom_annotation = column_ha,
col = color_mapping)
heatmapM
# Chunk 1
# load relevant libraries
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/fetal_comparison/tissue_depletion/rawData"
# Chunk 2
# import female depleted files
placentaF_depleted <- read_delim(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/fetal_comparison/readCounts_analysis/rawData/placentaF_depleted.csv"),
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## only keep ensembl column for venn diagram plots
dplyr::select(., ensembl)
# import male depleted files
placentaM_depleted <- read_delim(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/fetal_comparison/readCounts_analysis/rawData/placentaM_depleted.csv"),
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## only keep ensembl column for venn diagram plots
dplyr::select(., ensembl)
# Chunk 3
# load VennDiagram
library(VennDiagram)
# make lists of ensembl ids
placentaF <- placentaF_depleted$ensembl
placentaM <- placentaM_depleted$ensembl
merged <- dplyr::inner_join(placentaM_depleted, placentaF_depleted, by = join_by("ensembl"))
# create venn diagram of all female fetal tissue depleted transcripts
# move to new ploting page
grid.newpage()
venn.diagram(list(
"Female" = placentaF,
"Male" = placentaM),
filename = "/Users/taylaalbertini/Desktop/venndiagram_f.png",
output=TRUE,
compression = "none",
width = 3500,
cex = 1.5)
