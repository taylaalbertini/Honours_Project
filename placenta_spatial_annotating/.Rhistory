cell_type = c("EVT cell","Lymphoid cell", "Myeloid cell", "Smooth Muscle cell", "Stromal cell", "SCT and VCT cells", "Trophoblast Giant cell", "Vascular Endothelial cell"),
marker_genes = I(list(
evt, # EVT markers
lymphoid, # Lymphoid cell markers
myeloid, # Myeloid cell markers
smuscle, # Smooth Muscle cell markers
stromal, # Stromal cell markers
sct_vct, # SCT and VCT cell markers
trophoblast_giant, # Trophoblast Giant cell markers
vendothelial, # Vascular Endothelial cell markers
fetal_sct_vct # Fetal SCT and VCT cell markers
))
)
known_markers <- data.frame(
cell_type = c("EVT cell","Lymphoid cell", "Myeloid cell", "Smooth Muscle cell", "Stromal cell", "SCT and VCT cells", "Trophoblast Giant cell", "Vascular Endothelial cell", "Fetal SCT and VCT cells"),
marker_genes = I(list(
evt, # EVT markers
lymphoid, # Lymphoid cell markers
myeloid, # Myeloid cell markers
smuscle, # Smooth Muscle cell markers
stromal, # Stromal cell markers
sct_vct, # SCT and VCT cell markers
trophoblast_giant, # Trophoblast Giant cell markers
vendothelial, # Vascular Endothelial cell markers
fetal_sct_vct # Fetal SCT and VCT cell markers
))
)
print(known_markers)
library(Seurat)
library(SeuratObject)
library(ggplot2)
library(tidyverse)
# set data directory
data_dir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/outs"
# seu for Seurat
seu <- Load10X_Spatial(data.dir = data_dir, slice='sample1')
# View image in Seurat object
SpatialPlot(seu, pt.size.factor = 1.3, alpha = 1) +
NoLegend() +
ggtitle('my Visium data') +
theme(plot.title = element_text(hjust = 0.5))
# calculate % MT content per spot
# capital MT for human data. Lower case mt for mouse
seu <- PercentageFeatureSet(seu, "^MT-", col.name = "percent_mito")
## QC Trim objects individually
# filter data. Change these values based on your data and the violin plots
seu_fil <- subset(seu, subset = nCount_Spatial > 800 &
nFeature_Spatial > 500 &
percent_mito < 10)
## see where there are high counts in the image
SpatialFeaturePlot(seu, features = "nCount_Spatial") +
SpatialFeaturePlot(seu_fil, features = "nCount_Spatial")
## Seurat Workflow
seu_fil <- NormalizeData(seu_fil) ## normalise the data
seu_fil <- FindVariableFeatures(seu_fil) ## find the variable features
seu_fil <- ScaleData(seu_fil) ## scale the data
seu_fil <- RunPCA(seu_fil) # run linear dimensional reduction
seu_fil <- FindNeighbors(seu_fil, dims = 1:30) # find neighbours in order to cluster data
seu_fil <- FindClusters(seu_fil, resolution = 0.9)  # need to use optimal resolution to cluster data so that transitioning cells or similar cells are not clumped together
seu_fil <- RunUMAP(seu_fil, dims = 1:30, n.neighbors = 50)
# visualise the data
DimPlot(seu_fil, reduction = "umap", group.by = "seurat_clusters", label = T)
# identify marker genes
markers <- FindAllMarkers(seu_fil, assay = "Spatial", only.pos = TRUE)
# subset for the top marker genes for each cluster
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 10) %>%
ungroup() -> top10
# subset for the top marker genes for each cluster
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 5) %>%
ungroup() -> top5
# Function to match clusters to known cell types using a list of gene symbols
annotate_clusters <- function(markers, known_markers) {
cluster_annotations <- list()
for (cluster in unique(markers$cluster)) {
cluster_genes <- markers %>% filter(cluster == !!cluster) %>% pull(gene)
matched_cell_types <- list()
for (i in 1:nrow(known_markers)) {
if (any(cluster_genes %in% known_markers$marker_genes[[i]])) {
matched_cell_types <- c(matched_cell_types, known_markers$cell_type[i])
}
}
cluster_annotations[[as.character(cluster)]] <- unique(matched_cell_types)
}
return(cluster_annotations)
}
# annotate clusters
cluster_annotations <- annotate_clusters(top5, known_markers)
# print annotations
print(cluster_annotations)
# annotate clusters
cluster_annotations <- annotate_clusters(top10, known_markers)
# print annotations
print(cluster_annotations)
# create names vector of cluster annotations
cluster_labels <- sapply(cluster_annotations, function(x) paste(unique(x), collapse = ", "))
print(cluster_labels)
# add c;uster labels to Seurat object
seu_fil$cell_type <- seu_fil$seurat_clusters %>%
as.character() %>%
map_chr(~ cluster_labels[.])
print(seu_fil@meta.data$cell_type)
# Visualize the annotations
DimPlot(seu_fil, reduction = "umap", group.by = "cell_type")
print(cluster_labels)
library(Seurat)
library(SeuratObject)
library(ggplot2)
library(tidyverse)
# set data directory
data_dir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/outs"
# seu for Seurat
seu <- Load10X_Spatial(data.dir = data_dir, slice='sample1')
# View image in Seurat object
SpatialPlot(seu, pt.size.factor = 1.3, alpha = 1) +
NoLegend() +
ggtitle('my Visium data') +
theme(plot.title = element_text(hjust = 0.5))
# calculate % MT content per spot
# capital MT for human data. Lower case mt for mouse
seu <- PercentageFeatureSet(seu, "^MT-", col.name = "percent_mito")
## QC Trim objects individually
# filter data. Change these values based on your data and the violin plots
seu_fil <- subset(seu, subset = nCount_Spatial > 800 &
nFeature_Spatial > 500 &
percent_mito < 10)
seu_fil <- NormalizeData(seu_fil) ## normalise the data
seu_fil <- FindVariableFeatures(seu_fil) ## find the variable features
seu_fil <- ScaleData(seu_fil) ## scale the data
seu_fil <- RunPCA(seu_fil) # run linear dimensional reduction
seu_fil <- FindNeighbors(seu_fil, dims = 1:30) # find neighbours in order to cluster data
seu_fil <- FindClusters(seu_fil, resolution = 0.9)  # need to use optimal resolution to cluster data so that transitioning cells or similar cells are not clumped together
seu_fil <- RunUMAP(seu_fil, dims = 1:30, n.neighbors = 50)
# visualise the data
DimPlot(seu_fil, reduction = "umap", group.by = "seurat_clusters", label = T)
# identify marker genes
markers <- FindAllMarkers(seu_fil, assay = "Spatial", only.pos = TRUE)
# subset for the top marker genes for each cluster
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 5) %>%
ungroup() -> top5
# Amnion-like cells
amnion_like_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/amnion_like_cell.csv"), sep = "\t", header = TRUE)
# Cytotrophoblast cell
cytotrophoblast_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/cytotrophoblast_cell.csv"), sep = "\t", header = TRUE)
# Decidual cell
decidual_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/decidual_cell.csv"), sep = "\t", header = TRUE)
# Dendritic cell
dendritic_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/dendritic_cell.csv"), sep = "\t", header = TRUE)
# Epithelial cell
epithelial_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/epithelial_cell.csv"), sep = "\t", header = TRUE)
# EVT cell
evt_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/extravillous_trophoblast.csv"), sep = "\t", header = TRUE)
# M2 Macrophage cell
m2_macrophage_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/m2_macrophage_cell.csv"), sep = "\t", header = TRUE)
# Macrophage cell
macrophage_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/macrophage.csv"), sep = "\t", header = TRUE)
# Mesenchymal Stem cell
mesenchymal_stem_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/mesenchymal_stem_cell.csv"), sep = "\t", header = TRUE)
# Mesenchymal Stromal cell
mesenchymal_stromal_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/mesenchymal_stromal_cell.csv"), sep = "\t", header = TRUE)
# Monocyte Derived Macrophage cell
monocyte_derived_macrophage_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/monocyte_derived_macrophage.csv"), sep = "\t", header = TRUE)
# Monocyte cell
monocyte_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/monocyte.csv"), sep = "\t", header = TRUE)
# Natural Killer Cell
natural_killer_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/natural_killer_cell.csv"), sep = "\t", header = TRUE)
# Neutrophil cell
neutrophil_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/neutrophil_cell.csv"), sep = "\t", header = TRUE)
# RBC
rbc_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/red_blood_cell.csv"), sep = "\t", header = TRUE)
# Regulatory T cell
regulatory_t_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/regulatory_t_cell.csv"), sep = "\t", header = TRUE)
# Stem cell
stem_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/stem_cell.csv"), sep = "\t", header = TRUE)
# Syncytiotrophoblast cell
syncytiotrophoblast_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/syncytiotrophoblast.csv"), sep = "\t", header = TRUE)
# T cell
t_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/t_cell.csv"), sep = "\t", header = TRUE)
# Trophoectoderm cell
trophoectoderm_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/trophectoderm_cell.csv"), sep = "\t", header = TRUE)
# Trophoblast cell
trophoblast_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/trophoblast_cell.csv"), sep = "\t", header = TRUE)
# Vascular Endothelial cell
vendothelial_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/vascular_endothelial_cell.csv"), sep = "\t", header = TRUE)
# Vascular Smooth Muscle
vsmooth_muscle_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/vascular_smooth_muscle_cell.csv"), sep = "\t", header = TRUE)
# VCT cell
villous_cyto_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/villous_cytotrophoblast.csv"), sep = "\t", header = TRUE)
# Villous Stromal cell
villous_stromal_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/villous_stromal_cell.csv"), sep = "\t", header = TRUE)
# Amnion-like cells
amnion_like_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/amnion_like_cell.csv"), sep = "\t", header = FALSE)
# Amnion-like cells
amnion_like_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/amnion_like_cell.csv"), sep = ",", header = FALSE)
# Amnion-like cells
amnion_like_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/amnion_like_cell.csv"), sep = ",")
# Amnion-like cells
amnion_like_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/amnion_like_cell.csv"), sep = ",", header = TRUE)
View(villous_stromal_data)
# Amnion-like cells
amnion_like_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/amnion_like_cell.csv"), sep = ",", header = TRUE)
# Cytotrophoblast cell
cytotrophoblast_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/cytotrophoblast_cell.csv"), sep = ",", header = TRUE)
# Decidual cell
decidual_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/decidual_cell.csv"), sep = ",", header = TRUE)
# Dendritic cell
dendritic_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/dendritic_cell.csv"), sep = ",", header = TRUE)
# Epithelial cell
epithelial_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/epithelial_cell.csv"), sep = ",", header = TRUE)
# EVT cell
evt_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/extravillous_trophoblast.csv"), sep = ",", header = TRUE)
# M2 Macrophage cell
m2_macrophage_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/m2_macrophage_cell.csv"), sep = ",", header = TRUE)
# Macrophage cell
macrophage_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/macrophage.csv"), sep = ",", header = TRUE)
# Mesenchymal Stem cell
mesenchymal_stem_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/mesenchymal_stem_cell.csv"), sep = ",", header = TRUE)
# Mesenchymal Stromal cell
mesenchymal_stromal_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/mesenchymal_stromal_cell.csv"), sep = ",", header = TRUE)
# Monocyte Derived Macrophage cell
monocyte_derived_macrophage_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/monocyte_derived_macrophage.csv"), sep = ",", header = TRUE)
# Monocyte cell
monocyte_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/monocyte.csv"), sep = ",", header = TRUE)
# Natural Killer Cell
natural_killer_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/natural_killer_cell.csv"), sep = ",", header = TRUE)
# Neutrophil cell
neutrophil_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/neutrophil_cell.csv"), sep = ",", header = TRUE)
# RBC
rbc_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/red_blood_cell.csv"), sep = ",", header = TRUE)
# Regulatory T cell
regulatory_t_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/regulatory_t_cell.csv"), sep = ",", header = TRUE)
# Stem cell
stem_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/stem_cell.csv"), sep = ",", header = TRUE)
# Syncytiotrophoblast cell
syncytiotrophoblast_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/syncytiotrophoblast.csv"), sep = ",", header = TRUE)
# T cell
t_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/t_cell.csv"), sep = ",", header = TRUE)
# Trophoectoderm cell
trophoectoderm_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/trophectoderm_cell.csv"), sep = ",", header = TRUE)
# Trophoblast cell
trophoblast_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/trophoblast_cell.csv"), sep = ",", header = TRUE)
# Vascular Endothelial cell
vendothelial_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/vascular_endothelial_cell.csv"), sep = ",", header = TRUE)
# Vascular Smooth Muscle
vsmooth_muscle_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/vascular_smooth_muscle_cell.csv"), sep = ",", header = TRUE)
# VCT cell
villous_cyto_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/villous_cytotrophoblast.csv"), sep = ",", header = TRUE)
# Villous Stromal cell
villous_stromal_data <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/CellMaker/villous_stromal_cell.csv"), sep = ",", header = TRUE)
View(villous_cyto_data)
amnion <- amnion_like_data$marker
cyto <-cytotrophoblast_data$marker
decidual <- decidual_data$marker
dendritic <- dendritic_data$marker
epithelial <- epithelial_data$marker
evt <- evt_data$marker
m2_macro <- m2_macrophage_data$marker
macro <- macrophage_data$marker
mesenchymal_stem <- mesenchymal_stem_data$marker
mesenchymal_stromal <- mesenchymal_stromal_data$marker
monocyte <- monocyte_data$marker
monocyte_derived_macrophage <- monocyte_derived_macrophage_data$marker
natural_killer <- natural_killer_data$marker
neutrophil <- neutrophil_data$marker
rbc <- rbc_data$marker
reg_t <- regulatory_t_data$marker
stem <- stem_data$marker
sct <- syncytiotrophoblast_data$marker
t_cell <- t_data$marker
trophoblast <- trophoblast_data$marker
trophoectoderm <- trophoectoderm_data$marker
vct <- villous_cyto_data$marker
villous_stromal <- villous_stromal_data$marker
vsmooth <- vsmooth_muscle_data$marker
known_markers <- data.frame(
cell_type = c("Amnion-like cell","Cytotrophoblast cell", "Decidual cell", "Dendritic cell", "Epithelial cell", "Extravillous Trophoblast cell", "M2 Macrophage cell", "Macrophage cell", "Mesenchymal Stem cells", "Mesenchymal Stromal cell", "Monocyte cell", "Monocyte-derived Macrophage cell", "Natural Killer cell", "Neutrophil cell", "RBC", "Regulatory T cell", "Syncytiotrophoblast cell", "Stem cell", "T cell", "Trophoblast cell", "Trophoectoderm cell", "Villous Cytotrophoblast cell", "Villous Stromal cell", "Villous Smooth Muscle cell"),
marker_genes = I(list(
amnion,
cyto,
decidual,
dendritic,
epithelial,
evt,
m2_macro,
macro,
mesenchymal_stem,
mesenchymal_stromal,
monocyte,
monocyte_derived_macrophage,
natural_killer,
neutrophil,
rbc,
reg_t,
stem,
sct,
t_cell,
trophoblast,
trophoectoderm,
vct,
villous_stromal,
vsmooth
))
)
print(known_markers)
# Function to match clusters to known cell types using a list of gene symbols
annotate_clusters <- function(markers, known_markers) {
cluster_annotations <- list()
for (cluster in unique(markers$cluster)) {
cluster_genes <- markers %>% filter(cluster == !!cluster) %>% pull(gene)
matched_cell_types <- list()
for (i in 1:nrow(known_markers)) {
if (any(cluster_genes %in% known_markers$marker_genes[[i]])) {
matched_cell_types <- c(matched_cell_types, known_markers$cell_type[i])
}
}
cluster_annotations[[as.character(cluster)]] <- unique(matched_cell_types)
}
return(cluster_annotations)
}
# annotate clusters
cluster_annotations <- annotate_clusters(top10, known_markers)
# annotate clusters
cluster_annotations <- annotate_clusters(top5, known_markers)
# print annotations
print(cluster_annotations)
# subset for the top marker genes for each cluster
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 10) %>%
ungroup() -> top10
# annotate clusters
cluster_annotations <- annotate_clusters(top10, known_markers)
# print annotations
print(cluster_annotations)
# create names vector of cluster annotations
cluster_labels <- sapply(cluster_annotations, function(x) paste(unique(x), collapse = ", "))
print(cluster_labels)
# add c;uster labels to Seurat object
seu_fil$cell_type <- seu_fil$seurat_clusters %>%
as.character() %>%
map_chr(~ cluster_labels[.])
print(seu_fil@meta.data$cell_type)
# Visualize the annotations
DimPlot(seu_fil, reduction = "umap", group.by = "cell_type")
SpatialDimPlot(seu_fil, group.by = "cell_type")
# Visualize the annotations
DimPlot(seu_fil, reduction = "umap", group.by = "cell_type")
print(cluster_labels)
View(syncytiotrophoblast_data)
sct
cyto
SpatialDimPlot(seu_fil, group.by = "cell_type")
# load reference data
known_markers <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/CIBERSORTx_sigmatrix_Adjusted.csv"), sep = "\t", header = TRUE)
View(known_markers)
ref <- read.table(unz(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.txt.zip"), "GSE182381_reduced_reference_sample.txt"), header=TRUE, sep=",")
ref <- read.table(unz("GSE182381_reduced_reference_sample.txt.zip", "GSE182381_reduced_reference_sample.txt"), header=TRUE, sep=",")
zipfile <- "/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.txt.zip"
txtfile <- "GSE182381_reduced_reference_sample.txt"
# Open the zip file and read the CSV file inside it
ref <- read.csv(unz(zipfile, txtfile), header=TRUE, sep=",")
View(ref)
ref_2 <- read.csv(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.csv"), sep = "\t", header = TRUE)
# Read the file
large_data <- fread("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.txt")
library(data.table)
# Read the file
large_data <- fread("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.txt")
View(large_data)
library(Seurat)
library(SeuratObject)
library(ggplot2)
library(tidyverse)
# set data directory
data_dir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/outs"
# seu for Seurat
seu <- Load10X_Spatial(data.dir = data_dir, slice='sample1')
# View image in Seurat object
SpatialPlot(seu, pt.size.factor = 1.3, alpha = 1) +
NoLegend() +
ggtitle('my Visium data') +
theme(plot.title = element_text(hjust = 0.5))
# calculate % MT content per spot
# capital MT for human data. Lower case mt for mouse
seu <- PercentageFeatureSet(seu, "^MT-", col.name = "percent_mito")
## QC Trim objects individually
# filter data. Change these values based on your data and the violin plots
seu_fil <- subset(seu, subset = nCount_Spatial > 800 &
nFeature_Spatial > 500 &
percent_mito < 10)
## see where there are high counts in the image
SpatialFeaturePlot(seu, features = "nCount_Spatial") +
SpatialFeaturePlot(seu_fil, features = "nCount_Spatial")
seu_fil <- NormalizeData(seu_fil) ## normalise the data
seu_fil <- FindVariableFeatures(seu_fil) ## find the variable features
seu_fil <- ScaleData(seu_fil) ## scale the data
seu_fil <- RunPCA(seu_fil) # run linear dimensional reduction
seu_fil <- FindNeighbors(seu_fil, dims = 1:30) # find neighbours in order to cluster data
seu_fil <- FindClusters(seu_fil, resolution = 0.9)  # need to use optimal resolution to cluster data so that transitioning cells or similar cells are not clumped together
seu_fil <- RunUMAP(seu_fil, dims = 1:30, n.neighbors = 50)
# visualise the data
DimPlot(seu_fil, reduction = "umap", group.by = "seurat_clusters", label = T)
# for quicker calculations
install.packages('devtools')
devtools::install_github('immunogenomics/presto')
# identify marker genes
markers <- FindAllMarkers(seu_fil, assay = "Spatial", only.pos = TRUE)
# subset for the top marker genes for each cluster
markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1) %>%
slice_head(n = 5) %>%
ungroup() -> top5
install.packages("devtools")
# Read the file
large_data <- fread("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.txt")
library(data.table)
# Read the file
large_data <- fread("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.txt")
# remove rows with all zeros
large_data <- large_data[rowSums(large_data[,-1])>0,]
str(large_data)
head(large_data)
# Read the file
large_data <- fread("/Users/taylaalbertini/Desktop/R studio/honours_project/placenta_spatial_annotating/rawData/GSE182381_reduced_reference_sample.csv")
# remove rows with all zeros
large_data <- large_data[rowSums(large_data[,-1])>0,]
str(large_data)
head(large_data)
# Function to annotate clusters
annotate_clusters <- function(markers, known_markers) {
# Create an empty list to store annotations
cluster_annotations <- list()
# Iterate through each cluster
for (cluster in unique(markers$cluster)) {
# Get top markers for the cluster
cluster_markers <- markers %>% filter(cluster == !!cluster)
# Match these markers to the known_markers
matched_markers <- known_markers %>% filter(GeneSymbol %in% cluster_markers$gene) ## only keeping GeneSymbols that match the top genes from marker df
# Sum the counts for each cell type
cell_type_sums <- colSums(matched_markers[, -1])
# Find the cell type with the highest sum
annotated_cell_type <- names(cell_type_sums)[which.max(cell_type_sums)]
# Store the result
cluster_annotations[[as.character(cluster)]] <- annotated_cell_type
}
return(cluster_annotations)
}
# Annotate clusters
cluster_annotations <- annotate_clusters(top5, large_data)
# Check for duplicate column names
duplicated_colnames <- anyDuplicated(names(large_data))
if (duplicated_colnames) {
# Make column names unique
names(large_data) <- make.names(names(large_data), unique = TRUE)
}
# Annotate clusters
cluster_annotations <- annotate_clusters(top5, large_data)
# create names vector of cluster annotations
cluster_labels <- sapply(cluster_annotations, function(x) paste(unique(x), collapse = ", "))
print(cluster_labels)
# add c;uster labels to Seurat object
seu_fil$cell_type <- seu_fil$seurat_clusters %>%
as.character() %>%
map_chr(~ cluster_labels[.])
print(seu_fil@meta.data$cell_type)
# Visualize the annotations
DimPlot(seu_fil, reduction = "umap", group.by = "cell_type")
SpatialDimPlot(seu_fil, group.by = "cell_type")
# Function to keep the first occurrence of each column name
keep_first_occurrence <- function(df) {
unique_names <- unique(names(df))
result <- df[, unique_names]
return(result)
}
# Apply the function
large_data_unique <- keep_first_occurrence(large_data)
# Function to keep the first occurrence of each column name
keep_first_occurrence_dt <- function(dt) {
unique_names <- unique(names(dt))
dt[, ..unique_names, with = FALSE]
}
# Apply the function
large_data_unique <- keep_first_occurrence_dt(large_data)
# Annotate clusters
cluster_annotations <- annotate_clusters(top5, large_data_unique)
# create names vector of cluster annotations
cluster_labels <- sapply(cluster_annotations, function(x) paste(unique(x), collapse = ", "))
print(cluster_labels)
# add c;uster labels to Seurat object
seu_fil$cell_type <- seu_fil$seurat_clusters %>%
as.character() %>%
map_chr(~ cluster_labels[.])
print(seu_fil@meta.data$cell_type)
# Visualize the annotations
DimPlot(seu_fil, reduction = "umap", group.by = "cell_type")
View(cluster_annotations)
SpatialDimPlot(seu_fil, group.by = "cell_type")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("celldex")
library(celldex)
BiocManager::install("celldex")
