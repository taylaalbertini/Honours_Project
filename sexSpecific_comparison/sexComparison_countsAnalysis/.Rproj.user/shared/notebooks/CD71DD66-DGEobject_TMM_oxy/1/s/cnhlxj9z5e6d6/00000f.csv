"0","# use the edgeR built in function `cpm()` to make a new table of cpm counts"
"0","cpms_sex <- edgeR::cpm(dge_object_TMM, log = FALSE)"
"0","# use the cpms dataframe to grab all the ensembl IDs for the genes"
"0","genes_to_average <- rownames(cpms_sex)"
"0","# create a new object for the mean cpms"
"0","# first step is to transform the matrix (flip it 90' so genes are now in the columns and samples are in the rows)"
"0","mean_sex_tissue_cpms <- t(cpms_sex) %>%"
"0","  # make sure you have a data frame"
"0","  data.frame() %>%"
"0","  # move the samplenames into a column (we need this to join the metadata table)"
"0","  tibble::rownames_to_column(""sampleID"") %>%"
"0","  # join the counts and the metadata table (but we only want the samplename and tissue columns for your data so we're subsetting using the square brackets)"
"0","  dplyr::left_join(., dge_object_TMM$samples[, c(""sampleID"", ""tissue"", ""sex"")], by = join_by(sampleID)) %>%"
"0","  # drop the samplename column again (it was added by the join)"
"0","  dplyr::select(., -sampleID) %>%"
"0","   # add a column"
"0","  dplyr::mutate(sex_tissue = paste(sex, tissue, sep = ""_"")) %>%"
"0","  # group by the column of interest. Here I've use the ""sex_outcome"" column but in your data it will be the ""tissue"" column"
"0","  group_by(sex_tissue) %>%"
"0","  # calculate the mean cpms of all genes (using the ensembl gene vector we made earlier)"
"0","  dplyr::summarise_at(vars(genes_to_average), mean)"
"2","Warning:"
"2"," [1m[22mUsing an external vector in selections was deprecated in tidyselect 1.1.0.
[36mâ„¹[39m Please use `all_of()` or `any_of()` instead.
  # Was:
  data %>% select(genes_to_average)

  # Now:
  data %>% select(all_of(genes_to_average))

See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.[39m
"
