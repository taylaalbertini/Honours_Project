# convert rank_1_DESq into long form
## convert rows into a column
rank_1_DESq_long <- tibble::rownames_to_column(rank_1_DESq, var = "geneid")
## rename, remove "_cpm"
colnames(rank_1_DESq_long) <- gsub("_rank", "", colnames(rank_1_DESq_long))
# convert into long form
rank_1_DESq_long <- tidyr::gather(rank_1_DESq_long, tissue, rank, termF_placenta, termM_placenta)
rank_1_DESq_long_2 <- dplyr::filter(rank_1_DESq_long, rank == "1")
# join the long form tables - nCPM_1_DESq_long and rank_5_DESq
nCPM_rank_1_DESq_long <- dplyr::left_join(rank_1_DESq_long_2, nCPM_1_DESq_long, by = c("geneid", "tissue"))
## rename cpm to nCPM_5
colnames(nCPM_rank_1_DESq_long) <- gsub("cpm", "nCPM_1", colnames(nCPM_rank_1_DESq_long))
# create a long df of just placenta_rank == 2  with ensembl IDs and cpms
## create a long df with just the instances where placenta = 2
rank_placenta_long <- filter(rank_1_DESq_long, rank == "2")
## join nCPM_5_DESq_long to rank_placenta_long to create placenta rank 6 cpms table
placenta_2_nCPM <- dplyr::left_join(rank_placenta_long, nCPM_1_DESq_long, by = c("geneid", "tissue"))
### rename so they are unique
colnames(placenta_2_nCPM) <- gsub("cpm", "nCPM_2", colnames(placenta_2_nCPM))
### remove rank and tissue columns
placenta_2_nCPM <- dplyr::select(placenta_2_nCPM, -tissue, -rank)
# join placenta_2_nCPM and nCPM_rank_5_DESq_long creating a df with both the nCPMs of rank 5 and 6
nCPM1_nCPM2_DESq_female <- dplyr::left_join(nCPM_rank_1_DESq_long, placenta_2_nCPM, by = "geneid")
# create a new column nCPM5/nCPM6
nCPM1_nCPM2_DESq_female$nCPM_ratio <- nCPM1_nCPM2_DESq_female$nCPM_1 / nCPM1_nCPM2_DESq_female$nCPM_2
# select for nCPM_ratio > 3
placenta_f_depleted_DESq <- nCPM1_nCPM2_DESq_female[nCPM1_nCPM2_DESq_female$nCPM_ratio >3,]
View(placenta_f_depleted_DESq)
# replace column name 'geneid' with 'ensembl'
colnames(placenta_f_depleted_DESq) <- gsub("geneid", "ensembl", colnames(placenta_f_depleted_DESq))
# export placenta_f_depleted_DESq into project rawData for further analysis
write.csv(placenta_f_depleted_DESq, file = file.path(projectDir, "DESq_placentaF_depleted.csv"))
# Chunk 1
# load relevant libraries
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/term_sex_specific_analysis/rawData"
# Chunk 2
## load mean female DESq normalised CPM data from termPlacenta_comparison analysis
mean_termF_ncpms_DESq <- read_delim(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/termPlacenta_comparison/rawData/mean_female_cpms_term_DESq.csv"),
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
# remove the first column "...1" that;s input when the file is imported
dplyr::select(., -...1) %>%
## filter data table to only include term counts - remove mid-gestation placenta in row 1
dplyr::slice(-1) %>%
tibble::column_to_rownames(., var = "sex_tissue")
## make row name unique
rownames(mean_termF_ncpms_DESq) <- "termF_placenta"
## load mean male DESq normalised CPM data from termPlacenta_comparison analysis
mean_termM_ncpms_DESq <- read_delim(file = file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/termPlacenta_comparison/rawData/mean_male_cpms_term_DESq.csv"),
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
# remove the first column "...1" that;s input when the file is imported
dplyr::select(., -...1) %>%
## filter data table to only include term counts - remove mid-gestation placenta in row 1
dplyr::slice(-1) %>%
tibble::column_to_rownames(., var = "sex_tissue")
## make row name unique
rownames(mean_termM_ncpms_DESq) <- "termM_placenta"
## combine the two mean counts tables into one
mean_term_ncpms_DESq <- rbind(mean_termF_ncpms_DESq, mean_termM_ncpms_DESq)
## check to see if any NA values were input
sum(is.na(mean_term_ncpms_DESq))
## make a copy of mean_term_ncpms_DESq for downstream analysis
mean_term_ncpms_DESq_cp <- as.data.frame(mean_term_ncpms_DESq)
# make calc_rank a function
calculate_rank <- function(x) {
return(rank(-x))
}
# rank normalised cpms by sex_tissue
mean_term_ncpms_DESq[, paste0(names(mean_term_ncpms_DESq)[-1], "_Rank")] <- apply(mean_term_ncpms_DESq [, -1, drop = FALSE], 2, calculate_rank)
## create the df filtering just for _Rank
ranked_term_ncpms_DESq <- data.frame(mean_term_ncpms_DESq) %>%
dplyr::select(matches("_Rank"))
# creating the rank table
## create a dataframe with geneid in rows and samples in columns
ranked_term_DESq <- t(ranked_term_ncpms_DESq) %>%
data.frame() %>%
## change gene ensembls from being row names to its own column, matching the format of rankComparison_female_DESq
tibble::rownames_to_column("geneid")
### remove "_Rank" from the end of the geneids
ranked_term_DESq <- tidyr::separate(
ranked_term_DESq,
col = geneid,
into = c("geneid", "right"),
sep = "_Rank") %>%
mutate(geneid = str_remove(geneid, "_Rank")) %>%
dplyr::select(-right)
# rename to sex_tissue_rank
colnames(ranked_term_DESq) <- gsub("termF_placenta", "termF_placenta_rank", colnames(ranked_term_DESq))
colnames(ranked_term_DESq) <- gsub("termM_placenta", "termM_placenta_rank", colnames(ranked_term_DESq))
# create the nCPMs table in the same format as rank table so they can be joined
## transpose the data frame, flips rows and columns (rows become columns and columns become rows)
nCPMs_term_DESq <- t(mean_term_ncpms_DESq) %>%
data.frame() %>%
## change gene ensembls from being row names to its own column, matching the format of rankComparison_female_DESq
tibble::rownames_to_column("geneid")
# rename to sex_tissue_cpm
colnames(nCPMs_term_DESq) <- gsub("termF_placenta", "termF_placenta_cpm", colnames(nCPMs_term_DESq))
colnames(nCPMs_term_DESq) <- gsub("termM_placenta", "termM_placenta_cpm", colnames(nCPMs_term_DESq))
# combine via left_join nCPMs_term_DESq and ranked_term_DESq
nCPMs_rank_male <- dplyr::left_join(ranked_term_DESq, nCPMs_term_DESq, copy = TRUE, by = join_by(geneid))
# select for when placenta_rank = 2
term_rank2_DESq <- subset(nCPMs_rank_male, termM_placenta_rank == "2")
# filter for where rank = 5 and cpm > 1
nCPM_rank_1_DESq <- dplyr::filter(term_rank2_DESq, termF_placenta_rank == "1" & termF_placenta_cpm > 1)
# separate rank and ncpm into their own tables again to avoid introduction of geneid duplicates when the table is converted to long form. Will need to convert the rank and ncpm tables into long form individually and then join them together for nCPM(rank=1)/nCPM(rank=2) > 3 calculations.
## separate rank into its own table
rank_1_DESq <- tibble::column_to_rownames(nCPM_rank_1_DESq, var = "geneid") %>%
data.frame() %>%
dplyr::select(matches("_rank"))
## separate ncpm into its own table
nCPM_1_DESq <- tibble::column_to_rownames(nCPM_rank_1_DESq, var = "geneid") %>%
data.frame() %>%
dplyr::select(matches("_cpm"))
# convert cpm_1_DESq into long form
## convert rows into a column
nCPM_1_DESq_long <- tibble::rownames_to_column(nCPM_1_DESq, var = "geneid")
## rename, remove "_cpm"
colnames(nCPM_1_DESq_long) <- gsub("_cpm", "", colnames(nCPM_1_DESq_long))
#convert into long form
nCPM_1_DESq_long <- tidyr::gather(nCPM_1_DESq_long, tissue, cpm, termF_placenta, termM_placenta)
# convert rank_1_DESq into long form
## convert rows into a column
rank_1_DESq_long <- tibble::rownames_to_column(rank_1_DESq, var = "geneid")
## rename, remove "_cpm"
colnames(rank_1_DESq_long) <- gsub("_rank", "", colnames(rank_1_DESq_long))
# convert into long form
rank_1_DESq_long <- tidyr::gather(rank_1_DESq_long, tissue, rank, termF_placenta, termM_placenta)
rank_1_DESq_long_2 <- dplyr::filter(rank_1_DESq_long, rank == "1")
# join the long form tables - nCPM_1_DESq_long and rank_5_DESq
nCPM_rank_1_DESq_long <- dplyr::left_join(rank_1_DESq_long_2, nCPM_1_DESq_long, by = c("geneid", "tissue"))
## rename cpm to nCPM_5
colnames(nCPM_rank_1_DESq_long) <- gsub("cpm", "nCPM_1", colnames(nCPM_rank_1_DESq_long))
# create a long df of just placenta_rank == 2  with ensembl IDs and cpms
## create a long df with just the instances where placenta = 2
rank_placenta_long <- filter(rank_1_DESq_long, rank == "2")
## join nCPM_5_DESq_long to rank_placenta_long to create placenta rank 6 cpms table
placenta_2_nCPM <- dplyr::left_join(rank_placenta_long, nCPM_1_DESq_long, by = c("geneid", "tissue"))
### rename so they are unique
colnames(placenta_2_nCPM) <- gsub("cpm", "nCPM_2", colnames(placenta_2_nCPM))
### remove rank and tissue columns
placenta_2_nCPM <- dplyr::select(placenta_2_nCPM, -tissue, -rank)
# join placenta_2_nCPM and nCPM_rank_5_DESq_long creating a df with both the nCPMs of rank 5 and 6
nCPM1_nCPM2_DESq_male <- dplyr::left_join(nCPM_rank_1_DESq_long, placenta_2_nCPM, by = "geneid")
# create a new column nCPM5/nCPM6
nCPM1_nCPM2_DESq_male$nCPM_ratio <- nCPM1_nCPM2_DESq_male$nCPM_1 / nCPM1_nCPM2_DESq_male$nCPM_2
# select for nCPM_ratio > 3
placenta_m_depleted_DESq <- nCPM1_nCPM2_DESq_male[nCPM1_nCPM2_DESq_male$nCPM_ratio >3,]
View(placenta_m_depleted_DESq)
# replace column name 'geneid' with 'ensembl'
colnames(placenta_m_depleted_DESq) <- gsub("geneid", "ensembl", colnames(placenta_m_depleted_DESq))
View(placenta_m_depleted_DESq)
# export placenta_f_depleted_DESq into project rawData for further analysis
write.csv(placenta_m_depleted_DESq, file = file.path(projectDir, "DESq_placentaM_depleted.csv"))
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/term_sex_specific_analysis/rawData"
import_TMM_depletedF <- file.path(projectDir, "TMM_placentaF_depleted.csv")
import_DESq_depletedF <- file.path(projectDir, "DESq_placentaF_depleted.csv")
input_genome_gff3_file <- file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData/gencode.v29.chr_patch_hapl_scaff.annotation.gff3")
# TMM_depletedF
TMM_depletedF <- read_delim(file = import_TMM_depletedF,
col_names = TRUE,
delim = ",") %>%
as.data.frame()
# Chunk 1
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/term_sex_specific_analysis/rawData"
import_TMM_depletedF <- file.path(projectDir, "TMM_placentaF_depleted.csv")
import_DESq_depletedF <- file.path(projectDir, "DESq_placentaF_depleted.csv")
input_genome_gff3_file <- file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData/gencode.v29.chr_patch_hapl_scaff.annotation.gff3")
# TMM_depletedF
TMM_depletedF <- read_delim(file = import_TMM_depletedF,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## tidy df - remove the "..1" column
dplyr::select(., -...1)
View(TMM_depletedF)
# DESq_depletedF
DESq_depletedF <- read_delim(file = import_DESq_depletedF,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## tidy df - remove the "..1" column
dplyr::select(., -...1)
View(DESq_depletedF)
# import the gencodev32_gff_inFile file
all_gencode_v29 <- rtracklayer::import(input_genome_gff3_file)
# this file contains more information than we need here
# subset out only the columns we need
gene_data <- data.frame(ensembl = all_gencode_v29@elementMetadata$gene_id,
hgnc_symbol = all_gencode_v29@elementMetadata$gene_name,
seqnames = all_gencode_v29@seqnames,
gene_type = all_gencode_v29@elementMetadata$gene_type)
# we're left with multiple identical rows, keep one each
gencode_v29_gene_id_symbol_chr_biotype <- gene_data %>%
dplyr::distinct(., .keep_all = TRUE)
# which leaves us with the following dimensions where there is a unique combination of ensembl ID, hgnc symbol and chromosome
dim(gencode_v29_gene_id_symbol_chr_biotype) # 64837 3
# this does however, leave us with duplicate ensembl IDs
dim(gencode_v29_gene_id_symbol_chr_biotype[!duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl), ]) # 64792 3
# after generating a table to see the duplicates I can see that this is an X/Y chromosome issue. All genes are assigned to both chromosomes
duplicate_rows <- gencode_v29_gene_id_symbol_chr_biotype[duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl) | duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl, fromLast = TRUE),]
# remove duplicates (we don't use the chromosome information for anything)
gencode <- gencode_v29_gene_id_symbol_chr_biotype[!duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl), ]
View(TMM_depletedF)
# tidy the TMM and DESq2 normalised dfs
## filter the df to only including the relevant pieces of information and make specific to normalisation technique
# TMM
## remove rank column
TMM_depletedF <- TMM_depletedF[,-3]
## rename columns to be specific to TMM normalisation
colnames(TMM_depletedF) <- gsub("tissue", "tissue_TMM", colnames(TMM_depletedF))
colnames(TMM_depletedF) <- gsub("nCPM_1", "nCPM_1_TMM", colnames(TMM_depletedF))
colnames(TMM_depletedF) <- gsub("nCPM_2", "nCPM_termF_placenta_TMM", colnames(TMM_depletedF))
colnames(TMM_depletedF) <- gsub("nCPM_ratio", "nCPM_ratio_TMM", colnames(TMM_depletedF))
# DESq
## remove rank column
DESq_depletedF <- DESq_depletedF[,-3]
## rename columns to be specific to TMM normalisation
colnames(DESq_depletedF) <- gsub("tissue", "tissue_DESq", colnames(DESq_depletedF))
colnames(DESq_depletedF) <- gsub("nCPM_1", "nCPM_1_DESq", colnames(DESq_depletedF))
colnames(DESq_depletedF) <- gsub("nCPM_2", "nCPM_termF_placenta_DESq", colnames(DESq_depletedF))
colnames(DESq_depletedF) <- gsub("nCPM_ratio", "nCPM_ratio_DESq", colnames(DESq_depletedF))
## test to ensure there are no duplicated ensembl names
sum(duplicated(TMM_depletedF$ensembl))
# left join TMM_depletedF to DESq_depletedF
placentaF_depleted <- dplyr::inner_join(TMM_depletedF, DESq_depletedF, by = join_by(ensembl))
View(placentaF_depleted)
## export for plots
write.csv(placentaF_depleted, file.path(projectDir, "termF_depleted.csv"))
# left join gene signature with depleted ensembl id
# left join genecode and placentaF_depleted
placentaF_depleted_annotated <- dplyr::left_join(placentaF_depleted, gencode, by = join_by(ensembl))
# tidy placentaF_depleted_annotated
## remove seqnames and genetype columns
placentaF_depleted_annotated <- dplyr::select(placentaF_depleted_annotated, -seqnames, -gene_type)
## remove the period and numbers thereafter
placentaF_depleted_annotated_2 <- tidyr::separate(placentaF_depleted_annotated, col = ensembl, into = c("ensembl", "right")) %>%
dplyr::select(., -right)
View(placentaF_depleted_annotated)
library(ensembldb)
library(AnnotationHub)
ah <- AnnotationHub(ask = FALSE)
# take a look at the information inside
mcols(ah)
# use the `query()` function to extract the information for humans
ensdb_homo <- query(ah, c("EnsDb", "Homo sapiens"))
# keep only the information for AH95744 (which is the same as your gencode V29)
ensdb_104 <- ensdb_homo[["AH95744"]]
# Extract gene-level information and take a look
genes(ensdb_104, return.type = "data.frame") %>% View()
# now put that gene-level information into a data frame
genes_info <- genes(ensdb_104, return.type = "data.frame")
# left join genes_info with placentaF_depleted_annotated_2
## change geneid column name to ensembl
colnames(genes_info) <- gsub("gene_id", "ensembl", colnames(genes_info))
## left join the dfs
placentaF_depleted_annotated_2 <- dplyr::left_join(placentaF_depleted_annotated_2, genes_info, by = join_by(ensembl))
## tidy the df
placentaF_depleted_annotated_2 <- dplyr::select(placentaF_depleted_annotated_2, -11:-17)
placentaF_depleted_annotated_2 <- dplyr::select(placentaF_depleted_annotated_2, -12:-15)
View(placentaF_depleted_annotated_2)
write.csv(placentaF_depleted_annotated_2, file = file.path(projectDir, "termF_placenta_depleted_annotated.csv"))
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/term_sex_specific_analysis/rawData"
import_TMM_depletedM <- file.path(projectDir, "TMM_placentaM_depleted.csv")
import_DESq_depletedM <- file.path(projectDir, "DESq_placentaM_depleted.csv")
input_genome_gff3_file <- file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData/gencode.v29.chr_patch_hapl_scaff.annotation.gff3")
library(plyr)
library(reshape2)
library(dplyr)
library(stringr)
library(readxl)
library(readr)
library(magrittr)
library(ggplot2)
library(edgeR)
library(limma)
library(Glimma)
library(RColorBrewer)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/term_sex_specific_analysis/rawData"
import_TMM_depletedM <- file.path(projectDir, "TMM_placentaM_depleted.csv")
import_DESq_depletedM <- file.path(projectDir, "DESq_placentaM_depleted.csv")
input_genome_gff3_file <- file.path("/Users/taylaalbertini/Desktop/R studio/honours_project/oxygen_threshold/rawData/gencode.v29.chr_patch_hapl_scaff.annotation.gff3")
# TMM_depletedM
TMM_depletedM <- read_delim(file = import_TMM_depletedM,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## tidy df - remove the "..1" column
dplyr::select(., -...1)
# DESq_depletedM
DESq_depletedM <- read_delim(file = import_DESq_depletedM,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## tidy df - remove the "..1" column
dplyr::select(., -...1)
# import the gencodev32_gff_inFile file
all_gencode_v29 <- rtracklayer::import(input_genome_gff3_file)
# this file contains more information than we need here
# subset out only the columns we need
gene_data <- data.frame(ensembl = all_gencode_v29@elementMetadata$gene_id,
hgnc_symbol = all_gencode_v29@elementMetadata$gene_name,
seqnames = all_gencode_v29@seqnames,
gene_type = all_gencode_v29@elementMetadata$gene_type)
# we're left with multiple identical rows, keep one each
gencode_v29_gene_id_symbol_chr_biotype <- gene_data %>%
dplyr::distinct(., .keep_all = TRUE)
# which leaves us with the following dimensions where there is a unique combination of ensembl ID, hgnc symbol and chromosome
dim(gencode_v29_gene_id_symbol_chr_biotype) # 64837 3
# this does however, leave us with duplicate ensembl IDs
dim(gencode_v29_gene_id_symbol_chr_biotype[!duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl), ]) # 64792 3
# after generating a table to see the duplicates I can see that this is an X/Y chromosome issue. All genes are assigned to both chromosomes
duplicate_rows <- gencode_v29_gene_id_symbol_chr_biotype[duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl) | duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl, fromLast = TRUE),]
# remove duplicates (we don't use the chromosome information for anything)
gencode <- gencode_v29_gene_id_symbol_chr_biotype[!duplicated(gencode_v29_gene_id_symbol_chr_biotype$ensembl), ]
TMM_depletedM <- TMM_depletedM[,-3]
## rename columns to be specific to TMM normalisation
colnames(TMM_depletedM) <- gsub("tissue", "tissue_TMM", colnames(TMM_depletedM))
colnames(TMM_depletedM) <- gsub("nCPM_1", "nCPM_1_TMM", colnames(TMM_depletedM))
colnames(TMM_depletedM) <- gsub("nCPM_2", "nCPM_termM_placenta_TMM", colnames(TMM_depletedM))
colnames(TMM_depletedM) <- gsub("nCPM_ratio", "nCPM_ratio_TMM", colnames(TMM_depletedM))
# DESq
## remove rank column
DESq_depletedM <- DESq_depletedM[,-3]
## rename columns to be specific to TMM normalisation
colnames(DESq_depletedM) <- gsub("tissue", "tissue_DESq", colnames(DESq_depletedM))
colnames(DESq_depletedM) <- gsub("nCPM_1", "nCPM_1_DESq", colnames(DESq_depletedM))
colnames(DESq_depletedM) <- gsub("nCPM_2", "nCPM_termM_placenta_DESq", colnames(DESq_depletedM))
colnames(DESq_depletedM) <- gsub("nCPM_ratio", "nCPM_ratio_DESq", colnames(DESq_depletedM))
## test to ensure there are no duplicated ensembl names
sum(duplicated(TMM_depletedM$ensembl))
# left join TMM_depletedM to DESq_depletedM
placentaM_depleted <- dplyr::inner_join(TMM_depletedM, DESq_depletedM, by = join_by(ensembl))
## export for plots
write.csv(placentaM_depleted, file.path(projectDir, "termM_depleted.csv"))
# left join gene signature with depleted ensembl id
# left join genecode and placentaM_depleted
placentaM_depleted_annotated <- dplyr::left_join(placentaM_depleted, gencode, by = join_by(ensembl))
# tidy placentaM_depleted_annotated
## remove seqnames and genetype columns
placentaM_depleted_annotated <- dplyr::select(placentaM_depleted_annotated, -seqnames, -gene_type)
## remove the period and numbers thereafter
placentaM_depleted_annotated_2 <- tidyr::separate(placentaM_depleted_annotated, col = ensembl, into = c("ensembl", "right")) %>%
dplyr::select(., -right)
library(ensembldb)
library(AnnotationHub)
# lets take a snapshot of the AnnotationHub data base
ah <- AnnotationHub(ask = FALSE)
# take a look at the information inside
mcols(ah)
# use the `query()` function to extract the information for humans
ensdb_homo <- query(ah, c("EnsDb", "Homo sapiens"))
# keep only the information for AH95744 (which is the same as your gencode V29)
ensdb_104 <- ensdb_homo[["AH95744"]]
# Extract gene-level information and take a look
genes(ensdb_104, return.type = "data.frame") %>% View()
# now put that gene-level information into a data frame
genes_info <- genes(ensdb_104, return.type = "data.frame")
# left join genes_info with placentaM_depleted_annotated_2
## change geneid column name to ensembl
colnames(genes_info) <- gsub("gene_id", "ensembl", colnames(genes_info))
## left join the dfs
placentaM_depleted_annotated_2 <- dplyr::left_join(placentaM_depleted_annotated_2, genes_info, by = join_by(ensembl))
## tidy the df
placentaM_depleted_annotated_2 <- dplyr::select(placentaM_depleted_annotated_2, -11:-17)
placentaM_depleted_annotated_2 <- dplyr::select(placentaM_depleted_annotated_2, -12:-15)
write.csv(placentaM_depleted_annotated_2, file = file.path(projectDir, "termM_placenta_depleted_annotated.csv"))
library(stringr)
library(magrittr)
library(ggplot2)
library(RColorBrewer)
library(ggkegg)
library(tidygraph)
library(scatterpie)
library(dplyr)
library(readxl)
library(readr)
library(edgeR)
library(limma)
library(Glimma)
library(clusterProfiler)
library(enrichplot)
library(gprofiler2)
# set project directory
projectDir <- "/Users/taylaalbertini/Desktop/R studio/honours_project/term_sex_specific_analysis/rawData"
import_placentaF_depleted <- file.path(projectDir, "termF_placenta_depleted_annotated.csv")
import_placnetaM_depleted <- file.path(projectDir, "termM_placenta_depleted_annotated.csv")
# import placenta female depleted table and make it into a data frame
placentaF_depleted <- read_delim(import_placentaF_depleted,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## tidy placentaF_depleted - remove the "...1" column
dplyr::select(., -...1)
# import male placenta depleted table and make into a data frame
placentaM_depleted <- read_delim(import_placnetaM_depleted,
col_names = TRUE,
delim = ",") %>%
as.data.frame() %>%
## tidy placentaM_depleted - remove the "...1" column
dplyr::select(., -...1)
View(placentaF_depleted)
View(placentaF_depleted)
View(placentaM_depleted)
View(placentaF_depleted)
# female placenta enrichment analysis
## order genes by nCPM_ratio
placentaF_ordered <- placentaF_depleted[order(placentaF_depleted$nCPM_ratio_TMM, decreasing = TRUE),]
# perform enrichment analysis on ordered genes
placentaF_ordered_enriched <- gost(placentaF_ordered$ensembl, organism = "hsapiens",
ordered_query = TRUE)
head(placentaF_ordered_enriched$result, 100)
head(placentaF_ordered_enriched$result, 7)
# male placenta enrichment analysis
# order genes by nCPM_ratio
placentaM_ordered <- placentaM_depleted[order(placentaM_depleted$nCPM_ratio_TMM, decreasing = TRUE),]
# perform enrichment on ordered genes
placentaM_ordered_enriched <- gost(placentaM_ordered$ensembl, organism = "hsapiens",
ordered_query = TRUE)
head(placentaM_ordered_enriched$result, 50)
# load simplifyEnrichment package
library(simplifyEnrichment)
library(org.Hs.eg.db)
library(Cairo)
# semantic reduction of female GO terms
## craete a similarity matrix of the GO terms
### make a vector of GO IDs
go_id_vectorF <- placentaF_ordered_enriched$result$term_id %>%
as.vector()
go_id_similarityMatrixF <- GO_similarity(go_id_vectorF,
ont = "BP",
db = "org.Hs.eg.db",
measure = "Rel",
remove_orphan_terms = FALSE)
# semantic reduction of male GO terms
## craete a similarity matrix of the GO terms
### make a vector of GO IDs
go_id_vectorM <- placentaM_ordered_enriched$result$term_id %>%
as.vector()
go_id_similarityMatrixM <- GO_similarity(go_id_vectorM,
ont = "BP",
db = "org.Hs.eg.db",
measure = "Rel",
remove_orphan_terms = FALSE)
## use the simplifyEnrichment tool to cluster the GO terms
go_id_simplifiedM <- simplifyGO(mat = go_id_similarityMatrixM,
method = "binary_cut",
control = list(),
plot = TRUE,
verbose = TRUE)
View(go_id_similarityMatrixM)
View(go_id_simplifiedM)
View(go_id_similarityMatrixM)
View(placentaF_ordered_enriched)
View(placentaM_ordered_enriched)
placentaM_ordered_enriched[["result"]]
placentaM_ordered_enriched[["result"]][["term_name"]]
